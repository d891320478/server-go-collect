// Code generated by protoc-gen-triple. DO NOT EDIT.
//
// Source: bili.proto
package bili

import (
	"context"
)

import (
	"dubbo.apache.org/dubbo-go/v3"
	"dubbo.apache.org/dubbo-go/v3/client"
	"dubbo.apache.org/dubbo-go/v3/common"
	"dubbo.apache.org/dubbo-go/v3/common/constant"
	"dubbo.apache.org/dubbo-go/v3/protocol/triple/triple_protocol"
	"dubbo.apache.org/dubbo-go/v3/server"
)

// This is a compile-time assertion to ensure that this generated file and the Triple package
// are compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of Triple newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of Triple or updating the Triple
// version compiled into your binary.
const _ = triple_protocol.IsAtLeastVersion0_1_0

const (
	// BiliRpcServiceName is the fully-qualified name of the BiliRpcService service.
	BiliRpcServiceName = ".BiliRpcService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BiliRpcServiceRoomCanUseServerProcedure is the fully-qualified name of the BiliRpcService's RoomCanUseServer RPC.
	BiliRpcServiceRoomCanUseServerProcedure = "/.BiliRpcService/RoomCanUseServer"
	// BiliRpcServiceAddNewGuardProcedure is the fully-qualified name of the BiliRpcService's AddNewGuard RPC.
	BiliRpcServiceAddNewGuardProcedure = "/.BiliRpcService/AddNewGuard"
)

var (
	_ BiliRpcService = (*BiliRpcServiceImpl)(nil)
)

// BiliRpcService is a client for the .BiliRpcService service.
type BiliRpcService interface {
	RoomCanUseServer(ctx context.Context, req *Int64Value, opts ...client.CallOption) (*BoolValue, error)
	AddNewGuard(ctx context.Context, req *AddNewGuardRequest, opts ...client.CallOption) (*Empty, error)
}

// NewBiliRpcService constructs a client for the bili.BiliRpcService service.
func NewBiliRpcService(cli *client.Client, opts ...client.ReferenceOption) (BiliRpcService, error) {
	conn, err := cli.DialWithInfo(".BiliRpcService", &BiliRpcService_ClientInfo, opts...)
	if err != nil {
		return nil, err
	}
	return &BiliRpcServiceImpl{
		conn: conn,
	}, nil
}

func SetConsumerBiliRpcService(srv common.RPCService) {
	dubbo.SetConsumerServiceWithInfo(srv, &BiliRpcService_ClientInfo)
}

// BiliRpcServiceImpl implements BiliRpcService.
type BiliRpcServiceImpl struct {
	conn *client.Connection
}

func (c *BiliRpcServiceImpl) RoomCanUseServer(ctx context.Context, req *Int64Value, opts ...client.CallOption) (*BoolValue, error) {
	resp := new(BoolValue)
	if err := c.conn.CallUnary(ctx, []interface{}{req}, resp, "RoomCanUseServer", opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *BiliRpcServiceImpl) AddNewGuard(ctx context.Context, req *AddNewGuardRequest, opts ...client.CallOption) (*Empty, error) {
	resp := new(Empty)
	if err := c.conn.CallUnary(ctx, []interface{}{req}, resp, "AddNewGuard", opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

var BiliRpcService_ClientInfo = client.ClientInfo{
	InterfaceName: ".BiliRpcService",
	MethodNames:   []string{"RoomCanUseServer", "AddNewGuard"},
	ConnectionInjectFunc: func(dubboCliRaw interface{}, conn *client.Connection) {
		dubboCli := dubboCliRaw.(*BiliRpcServiceImpl)
		dubboCli.conn = conn
	},
}

// BiliRpcServiceHandler is an implementation of the .BiliRpcService service.
type BiliRpcServiceHandler interface {
	RoomCanUseServer(context.Context, *Int64Value) (*BoolValue, error)
	AddNewGuard(context.Context, *AddNewGuardRequest) (*Empty, error)
}

func RegisterBiliRpcServiceHandler(srv *server.Server, hdlr BiliRpcServiceHandler, opts ...server.ServiceOption) error {
	return srv.Register(hdlr, &BiliRpcService_ServiceInfo, opts...)
}

func SetProviderBiliRpcService(srv common.RPCService) {
	dubbo.SetProviderServiceWithInfo(srv, &BiliRpcService_ServiceInfo)
}

var BiliRpcService_ServiceInfo = server.ServiceInfo{
	InterfaceName: ".BiliRpcService",
	ServiceType:   (*BiliRpcServiceHandler)(nil),
	Methods: []server.MethodInfo{
		{
			Name: "RoomCanUseServer",
			Type: constant.CallUnary,
			ReqInitFunc: func() interface{} {
				return new(Int64Value)
			},
			MethodFunc: func(ctx context.Context, args []interface{}, handler interface{}) (interface{}, error) {
				req := args[0].(*Int64Value)
				res, err := handler.(BiliRpcServiceHandler).RoomCanUseServer(ctx, req)
				if err != nil {
					return nil, err
				}
				return triple_protocol.NewResponse(res), nil
			},
		},
		{
			Name: "AddNewGuard",
			Type: constant.CallUnary,
			ReqInitFunc: func() interface{} {
				return new(AddNewGuardRequest)
			},
			MethodFunc: func(ctx context.Context, args []interface{}, handler interface{}) (interface{}, error) {
				req := args[0].(*AddNewGuardRequest)
				res, err := handler.(BiliRpcServiceHandler).AddNewGuard(ctx, req)
				if err != nil {
					return nil, err
				}
				return triple_protocol.NewResponse(res), nil
			},
		},
	},
}
